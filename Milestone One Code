#include "BluetoothSerial.h"
#include <ESP32Servo.h>
#include <Wire.h>
#include "HUSKYLENS.h"
#include <Adafruit_INA219.h>
#define PRINTLN(arg) Serial.println(arg); SerialBT.println(arg)
BluetoothSerial SerialBT;
Servo motorServo;
Servo steeringServo;
const int steeringServoPin = 32;
const int motorServoPin = 33;
HUSKYLENS camera;
Adafruit_INA219 ina219;
void setup() {
  Serial.begin(115200);
  SerialBT.begin("ECE362CarTeam04");
  //while (!Serial.available());
// while (!SerialBT.available());
delay(2000);
  Wire.begin();
  // Init motors
  motorServo.attach(motorServoPin, 800, 2000);
  steeringServo.attach(steeringServoPin, 800, 2000);
  delay(1000);
  motorServo.write(0);
  steeringServo.write(0);
  delay(3000);
  // Init camera
  camera.begin(Wire);
//  if (!testCamera) {
//      PRINTLN(F("Begin failed!"));
//      PRINTLN(F("1.Please recheck the \"Protocol Type\" in HUSKYLENS (General Settings>>Protocol Type>>I2C)"));
//      PRINTLN(F("2.Please recheck the connection."));
//      delay(100);
//  }
  // Init current sensor
  ina219.begin();
  if (!ina219.begin()) {
    PRINTLN(F("Couldn't find INA219 device"));
  }
}
void testServos(void);
void testCamera(void);
void testCurrentSensor(void);
void loop() {
  testServos();
  testCamera();
  testCurrentSensor();
  delay(1000);
}
void testServos(void) {
  motorServo.write(120);
  steeringServo.write(10);
  delay(1000);
  motorServo.write(85);
  steeringServo.write(90);
  delay(1000);
  motorServo.write(50);
  steeringServo.write(170);
  delay(1000);
  motorServo.write(0);
  steeringServo.write(90);
}
void testCamera(void) {
  if (!camera.request()) {
    PRINTLN(F("Fail to request data from HUSKYLENS, recheck the connection!"));
  } else if (!camera.isLearned()) {
    PRINTLN(F("Nothing learned, press learn button on HUSKYLENS to learn one!"));
  } else if (!camera.available()) {
    PRINTLN(F("No arrow appears on the screen!"));
  } else {
    while (camera.available()) {
        HUSKYLENSResult result = camera.read();
        PRINTLN(String() + F("Found arrow #") + result.ID + F(": from (") + result.xOrigin + F(", ") + result.yOrigin + F(") to (") + result.xTarget + F(", ") + result.yTarget + F(")"));
    }
  }
}
void testCurrentSensor(void) {
  float current_ma = ina219.getCurrent_mA();
  PRINTLN(String() + F("Current: ") + current_ma + F(" mA"));
}
